orbs:
  sonarcloud: sonarsource/sonarcloud@1.0.1

docker_deploy: &docker_deploy
  context: org-global
  requires:
    - build

workflows:
  version: 2
  nightly:
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - build:
          filters:
            tags:
              only:
                /.*/
      - deploy:
          <<: *docker_deploy
          tag: nightly
          filters:
            branches:
              only: develop

  main:
    jobs:
      - sonar:
          context: org-global
      - build:
          filters:
            tags:
              only:
                /.*/
      - deploy:
          <<: *docker_deploy
          tag: rc
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+)*(\S*)([a|rc|beta]([0-9]+))+$/
      - deploy:
          <<: *docker_deploy
          tag: latest
          release: true
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+(\.[0-9]+)*$/

ALIASES:
  - &restore_cache
    restore_cache:
      keys:
        - v1-{{ .Branch }}
      paths:
        - /caches/app.tar
  - &docker_load
    run:
      name: Load Docker image layer cache
      command: |
        set +o pipefail
        docker load -i /caches/app.tar | true
  - &docker_build
    run:
      name: Build application Docker image
      command: |
        docker build --cache-from=app -t app .
  - &docker_save
    run:
      name: Save Docker image layer cache
      command: |
        mkdir -p /caches
        docker save -o /caches/app.tar app
  - &save_cache
    save_cache:
      key: v1-{{ .Branch }}-{{ epoch }}
      paths:
        - /caches/app.tar


version: 2.1
jobs:
  sonar:
    docker:
      - image: circleci/openjdk:11-node
    steps:
      - checkout
      - run: npm install typescript
      - sonarcloud/scan

  build:
    working_directory: /app
    docker:
      - image: docker:18.06.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - *restore_cache
      - *docker_load
      - *docker_build
      - *docker_save
      - *save_cache

  deploy:
    parameters:
      tag:
        type: string
      release:
        type: boolean
        default: false
    docker:
      - image: docker:18.06.0-ce-git
    steps:
      - checkout
      - setup_remote_docker
      - *restore_cache
      - *docker_load
      - *docker_build
      - *docker_save
      - *save_cache
      - run: |
          echo "${DOCKER_PASSWORD}" | \
              docker login -u "${DOCKER_ID_USER}" --password-stdin
          docker tag app loudml/chronograf:<< parameters.tag >>
          docker push loudml/chronograf:<< parameters.tag >>
      - when:
          condition: << parameters.release >>
          steps:
            - run: |
                docker tag app loudml/chronograf:${CIRCLE_SHA1:0:7}
                docker push loudml/chronograf:${CIRCLE_SHA1:0:7}
                docker tag app loudml/chronograf:${CIRCLE_TAG}
                docker push loudml/chronograf:${CIRCLE_TAG}
